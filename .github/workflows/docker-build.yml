name: Docker Build CI

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

env:
  GIT_BRANCH_NAME: "${{ github.ref }}" # ${GIT_BRANCH_NAME##*/}
  GIT_REPOSITORY_NAME: "${{ github.event.repository.name }}"
  DOCKER_REPOSITORY: mvladislav

  PROJECT_NAME: VM-API
  ENV_MODE: "${{ contains(github.ref, 'main') && 'PROD' || 'KONS' }}"
  LOGGING_LEVEL: "${{ contains(github.ref, 'main') && 'INFO' || 'DEBUG' }}"
  LOGGING_VERBOSE: "${{ contains(github.ref, 'main') && 2 || 3 }}"
  SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  ACCESS_TOKEN_EXPIRE_MINUTES: "${{ contains(github.ref, 'main') && 43800 || 30 }}"
  DB_PROTOCOL: mongodb
  DB_HOST: localhost
  DB_PORT: 27017
  DB_SCHEMA: test01
  DB_USER: test
  DB_PASSWORD: swordfish

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # BUILD
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Build the Docker image
        run: docker build . -f docker/Dockerfile -t ${DOCKER_REPOSITORY}/${GIT_REPOSITORY_NAME}:latest -t ${DOCKER_REPOSITORY}/${GIT_REPOSITORY_NAME}:$(date +%s) -t ${DOCKER_REPOSITORY}/${GIT_REPOSITORY_NAME}:${GIT_BRANCH_NAME##*/} --build-arg PROJECT_NAME --build-arg ENV_MODE --build-arg LOGGING_LEVEL --build-arg LOGGING_VERBOSE --build-arg SECRET_KEY --build-arg ACCESS_TOKEN_EXPIRE_MINUTES --build-arg DB_PROTOCOL --build-arg DB_HOST --build-arg DB_PORT --build-arg DB_SCHEMA --build-arg DB_USER --build-arg DB_PASSWORD
