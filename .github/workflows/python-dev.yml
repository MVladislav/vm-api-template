name: Python DEV CI

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

env:
  GIT_BRANCH_NAME: "${{ github.ref }}" # ${GIT_BRANCH_NAME##*/}
  GIT_REPOSITORY_NAME: "${{ github.event.repository.name }}"

  PROJECT_NAME: VM-API
  ENV_MODE: "${{ contains(github.ref, 'main') && 'PROD' || 'KONS' }}"
  LOGGING_LEVEL: "${{ contains(github.ref, 'main') && 'INFO' || 'DEBUG' }}"
  LOGGING_VERBOSE: "${{ contains(github.ref, 'main') && 2 || 3 }}"
  SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  ACCESS_TOKEN_EXPIRE_MINUTES: "${{ contains(github.ref, 'main') && 43800 || 30 }}"
  DB_PROTOCOL: mongodb
  DB_HOST: localhost
  DB_PORT: 27017
  DB_SCHEMA: test01
  DB_USER: test
  DB_PASSWORD: swordfish

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # TEST
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install pylint flake8 pytest
          # install requirements if no setup.py is existing, else it will insall in next step
          if [[ -f requirements.txt && ! -f setup.py ]]; then pip3 install -r requirements.txt; fi

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: test install project with dependencies
        run: |
          pip3 install starlette
          if [ -f setup.py ]; then pip3 install .; fi

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: analyzing the code with pylint
        run: |
          python3 -m pylint --rcfile=setup.cfg `find -regextype egrep -regex '(.*.py)$'` |
          tee pylint.log

      - name: lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics |
          tee flake8_1.log
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics |
          tee flake8_2.log

      - name: test with pytest
        run: |
          python3 -m pytest |
          tee pytest.log

      - name: upload flake8_1.log as artifact
        uses: actions/upload-artifact@v2
        with:
          name: python test report
          path: |
            pylint.log
            flake8_1.log
            flake8_2.log
            pytest.log
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  # BUILD
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  build:
    needs: test

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install starlette

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      # - name: Build package
      #   run: python3 -m build -s
      - name: build binary wheel and a source tarball
        run: python3 setup.py sdist

      - name: archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: vm-api-app
          path: |
            dist

  # DEPLOY
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  deploy:
    needs: build

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      # - name: install SSH key
      #   uses: shimataro/ssh-key-action@v2
      #   with:
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     known_hosts: "just-a-placeholder-so-we-dont-get-errors"
      # - name: adding known hosts
      #   run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      # - name: deploy with rsync
      #   run: rsync -avz ./dist/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/app/dist/

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: download build result from build step
        uses: actions/download-artifact@v2
        with:
          name: vm-api-app

      - name: un-tar final result
        run: |
          tar -xvzf VM-API-*.tar.gz
          rm VM-API-*.tar.gz

      # - name: create .env file
      #   uses: SpicyPizza/create-envfile@v1
      #   with:
      #     directory: VM-API-*/
      #     file_name: .env
      #     envkey_PROJECT_NAME: VM-API
      #     envkey_ENV_MODE: KONS
      #     envkey_LOGGING_LEVEL: DEBUG
      #     envkey_LOGGING_VERBOSE: 3
      #     envkey_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      #     envkey_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      #     envkey_DB_PROTOCOL: mongodb
      #     envkey_DB_HOST: localhost
      #     envkey_DB_PORT: 27017
      #     envkey_DB_SCHEMA: test01
      #     envkey_DB_USER: admin
      #     envkey_DB_PASSWORD: swordfish

      - name: install final result
        run: |
          pip3 install starlette
          pip3 install VM-API-*/

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
